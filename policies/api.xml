<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
    ##########################################
    ################ Metadata ################
    ##########################################
    ## API Name: InternalOperations_ServiceNow_ProdGeoHierarchy_V1
    ## API Short Name: InternalOperations-ServiceNow-ProdGeoHierarchy-V1
    ## Service Now Ticket No: RITM6851374
    ##########################################
-->
<policies>
    <inbound>
        <base />
        <!-- [Start] Backend validation -->
        <authentication-basic username="{{InternalOperations-ServiceNow-ProdGeoHierarchy-V1-username}}" password="{{InternalOperations-ServiceNow-ProdGeoHierarchy-V1-password}}" />
        <!-- [Stop] Backend validation -->
        <set-variable name="callerIp" value="@{
            string[] value;
            if (context.Request.Headers.TryGetValue("X-Forwarded-For", out value)) {</>
                if(value != null && value.Length == 1) {
                    return value[0].Contains(':') ? (value[0]).Split(':')[0] : value[0];
                }
                if(value != null && value.Length > 1) {
                    return value[1].Contains(':') ? (value[1]).Split(':')[0] : value[1]; 
                }
            }
            return null;
        }" />
        <!-- [Start] Ratelimit -->
        <rate-limit-by-key
            calls="{{InternalOperations-ServiceNow-ProdGeoHierarchy-V1-ratelimit-calls}}"
            renewal-period="{{InternalOperations-ServiceNow-ProdGeoHierarchy-V1-ratelimit-renewal-period}}"
            counter-key="@(context.Variables.GetValueOrDefault<string>("callerIp"))"
            increment-condition="@(context.Response.StatusCode >= 200 && context.Response.StatusCode < 300)"
        />
        <!-- [Stop ] Ratelimit -->
        <!-- [Start] Quota -->
        <quota-by-key
            calls="{{InternalOperations-ServiceNow-ProdGeoHierarchy-V1-quota-calls}}"
            renewal-period="{{InternalOperations-ServiceNow-ProdGeoHierarchy-V1-quota-renewal-period}}"
            counter-key="@(context.Variables.GetValueOrDefault<string>("callerIp"))"
            increment-condition="@(context.Response.StatusCode >= 200 && context.Response.StatusCode < 400)"
        />
        <!-- [Stop ] Quota -->
        <!-- [Start] IP Whitelisting with CIDRS -->
        <set-variable name="allowedIps" value="{{InternalOperations-ServiceNow-ProdGeoHierarchy-V1-allowed-ips}}" />
        <set-variable name="appGatewayIpAdress" value="@(context.Request.IpAddress)" />
        <set-variable name="validCIDRs" value="{{InternalOperations-ServiceNow-ProdGeoHierarchy-V1-allowed-cidrs}}" />
        <set-variable name="callerIpInValidRange" value="@{
            int HostToNetworkOrder(int host)
            {
                return (((int)HostToNetworkOrderShort((short)host) & 0xFFFF) << 16) | ((int)HostToNetworkOrderShort((short)(host >> 16)) & 0xFFFF);
            }
            short HostToNetworkOrderShort(short host)
            {
                return (short)((((int)host & 0xFF) << 8) | (int)((host >> 8) & 0xFF));
            }
            string ipAddress = context.Variables.GetValueOrDefault<string>("callerIp");
            List<string> cidrList = context.Variables.GetValueOrDefault<string>("validCIDRs").Split(',').ToList();
            string ret = "false";
            if (cidrList.Contains("0.0.0.0/0"))
            {
                ret = "true";
            }
            else if (!string.IsNullOrEmpty(ipAddress))
            {
                foreach (string cidrAddress in cidrList)
                {
                    string[] cidrParts = cidrAddress.Split('/');
                    string[] inputIPParts = ipAddress.Split('.');
                    string[] cidrIPArray = cidrParts[0].Split('.');
                    if (inputIPParts.Length == 4 && cidrIPArray.Length == 4)
                    {
                        byte[] inputIPBytes = new byte[] {
                            Convert.ToByte(int.Parse(inputIPParts[0])), 
                            Convert.ToByte(int.Parse(inputIPParts[1])), 
                            Convert.ToByte(int.Parse(inputIPParts[2])),
                            Convert.ToByte(int.Parse(inputIPParts[3]))
                        };
                        byte[] cidrIPBytes = new byte[] {
                            Convert.ToByte(int.Parse(cidrIPArray[0])), 
                            Convert.ToByte(int.Parse(cidrIPArray[1])), 
                            Convert.ToByte(int.Parse(cidrIPArray[2])),
                            Convert.ToByte(int.Parse(cidrIPArray[3]))
                        };
                        int cidrAddr = BitConverter.ToInt32(cidrIPBytes,0);
                        int ipAddr = BitConverter.ToInt32(inputIPBytes,0);
                        var host = int.Parse(cidrParts[1]);
                        host = -1 << (32-host);
                        var mask = HostToNetworkOrder(host);
                        if (((ipAddr & mask) == (cidrAddr & mask)))
                        {
                            ret = "true";
                        }
                    }
                }
            }
            return ret;
        }" />
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault<string>("callerIpInValidRange")=="false")">
                <choose>
                    <when condition="@(context.Variables.GetValueOrDefault<string>("allowedIps").Split(',').Contains(context.Variables["callerIp"]))" />
                    <otherwise>
                        <return-response>
                            <set-status code="401" reason="Forbidden" />
                            <set-header name="ErrorMessage" exists-action="override">
                                <value />
                            </set-header>
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-body>{"statusCode": "401" ,"Message": "This Ip Address is forbidden"}</set-body>
                        </return-response>
                    </otherwise>
                </choose>
            </when>
        </choose>
        <!-- [Stop] IP Whitelisting with CIDRS -->
        <!-- [Start] For Query Parameters Regular Expression Protection -->
        <set-variable name="queryparmregexp" value="@{
            String s_queryparm = "", s_queryval = "";
            int i = 0;
            String currurl = context.Request.Url.ToString();
            bool s = false;
            string regstr = @"[\s]*((delete)|(exec)|(drop\s*table)|(insert)|(shutdown)|(update)|(\bor\b))";
            Regex reg = new Regex(regstr);
            if (currurl != "") {
                var matches = Regex.Matches(currurl, @"[\?&](([^&=]+)=([^&=#]*))", RegexOptions.Compiled);
                foreach (Match m in matches) {
                    s_queryparm = m.Groups[2].Value;//query parameter
                    s_queryval = m.Groups[3].Value;//query parameter value
                    if (s == false)
                    {
                        if (reg.IsMatch(s_queryval.ToLower()))//query parameter value
                        {
                            s = true;
                        }
                    }
                    if (s == false)
                    {
                        if (reg.IsMatch(s_queryparm.ToLower()))//query name
                        {
                            s = true;
                        }
                    }
                }
            }
            return s;
            }" />
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault<bool>("queryparmregexp"))">
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-header name="ErrorMessage" exists-action="override">
                        <value>SQL Injection</value>
                    </set-header>
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body template="liquid">{"statusCode": "400" ,"Message": "SQL Injection detected"}</set-body>
                </return-response>
            </when>
            <otherwise />
        </choose>
        <!--[Stop] For Query Parameters Regular Expression Protection -->
        <!-- [Start] Request Message Size Validation -->
        <choose>
            <when condition="@(context.Request.Method.Equals("POST") || context.Request.Method.Equals("PUT"))">
                <set-variable name="bodySize" value="@(context.Request.Headers["Content-Length"][0])" />
                <choose>
                    <!-- Bodysize is expressed in Bytes -->
                    <when condition="@(int.Parse(context.Variables.GetValueOrDefault<string>("bodySize"))>{{InternalOperations-ServiceNow-ProdGeoHierarchy-V1-request-size}})">
                        <!-- one or more policy statements to be applied if the above condition is true  -->
                        <return-response>
                            <set-status code="400" reason="Bad Request" />
                            <set-header name="ErrorMessage" exists-action="override">
                                <value>Message too large</value>
                            </set-header>
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-body template="liquid">{"statusCode": "400" ,"Message": "Message request too large"}</set-body>
                        </return-response>
                    </when>
                    <otherwise />
                </choose>
            </when>
        </choose>
        <!-- [Stop ] Request Message Size Validation -->
        <!-- [Start] Rerouting of geosite backend url-->
        <set-variable name="Operation-ID" value="@(context.Operation.Id)" />
        <set-variable name="geosite-backend" value="{{InternalOperations-ServiceNow-ProdGeoHierarchy-V1-geosite-backend}}" />
        <choose>
            <when condition="@(context.Operation.Id == "GET-GeoSiteHierarchy")">
                <set-backend-service base-url="@(context.Variables.GetValueOrDefault<string>("geosite-backend"))" />
            </when>
        </choose>
        <!-- [Stop] Rerouting of geosite backend url-->
        <!-- [Start] Remove headers -->
        <set-header name="Ocp-Apim-Subscription-Key" exists-action="delete" />
        <set-header name="Ocp-Apim-Trace" exists-action="delete" />
        <!-- [Stop ] Remove headers -->
    </inbound>
    <backend>
        <forward-request />
    </backend>
    <outbound>
        <base />
        <!-- [Start] Response Message Size Validation -->
        <choose>
            <when condition="@(context.Response.Body.As<string>(preserveContent: true).Length > ({{InternalOperations-ServiceNow-ProdGeoHierarchy-V1-response-size}}))">
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-header name="ErrorMessage" exists-action="override">
                        <value>Message response too large.</value>
                    </set-header>
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>{"statusCode": "400" ,"Message": "Message response too large"}</set-body>
                </return-response>
            </when>
            <otherwise />
        </choose>
        <!-- [Stop ] Response Message Size Validation -->
        <set-header name="Cache-Control" exists-action="override">
            <value>no-cache</value>
        </set-header>
        <set-header name="Content-Security-Policy" exists-action="override">
            <value>default-src 'self'</value>
        </set-header>
        <set-header name="Strict-Transport-Security" exists-action="override">
            <value>max-age=31536000; includeSubDomains</value>
        </set-header>
        <set-header name="X-XSS-Protection" exists-action="override">
            <value>1; mode=block</value>
        </set-header>
        <set-header name="X-Content-Type-Options" exists-action="override">
            <value>nosniff</value>
        </set-header>
        <set-header name="X-Frame-Options" exists-action="override">
            <value>deny</value>
        </set-header>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>